@namespace WalletMate.BlazorApp.Components
@inject WalletMate.Application.Core.IAuthorizationService AuthorizationService;
@inherits BlazorState.BlazorStateComponent

<div class="container text-white-50 border rounded @_mainContainer.CssClass" @onclick="ContainerClicked" @onmouseover="_mainContainer.MouseOver" @onmouseout="_mainContainer.MouseOut">
    <div class="row">
        <div class="col text-center">
            @if (Pair == Pair.First) {
                <i class="fa fa-user-circle" style="font-size: 80px;color: rgb(39,102,166);"></i>
            }
            else {
                <i class="fa fa-user-circle-o" style="font-size: 80px;color: rgb(39,166,105);"></i>
            }
        </div>
    </div>
    <div class="row">
        <div class="col text-center">
            <strong class="text-secondary" style="font-size: 21px;filter: contrast(126%) grayscale(0%);">@Name</strong>
        </div>
    </div>
    @if (VisiblePassword) {
        <div class="row">
            <div class="col text-center">
                <CascadingValue TValue="Action" Value="@AnimationEnd" Name="EndAnimation">
                    <InputPassword @ref="_inputPassword" Shake="@BadPassword" PlaceHolder="Mot de passe" style="margin: 20px;" />
                </CascadingValue>
            </div>
        </div>
        <div class="row">
            <div class="col text-center">
                <div role="group" class="btn-group btn-group-sm" style="margin: 10px;">
                    <button class="btn btn-success" type="button" style="width: 70px;" @onclick="PasswordOkClicked" @onclick:stopPropagation>OK</button>
                    <button class="btn btn-danger" type="button" style="width: 70px;;" @onclick="PasswordCancelClicked" @onclick:stopPropagation>Annuler</button>
                </div>
            </div>
        </div>
    }

</div>

@code {

    InputPassword _inputPassword;

    public void AnimationEnd()
    {
        Mediator.Send(new LoginState.BadLoginNotified(Pair));
    }

    [Parameter]
    public Pair Pair { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public bool BadPassword { get; set; }

    [Parameter]
    public bool VisiblePassword { get; set; }

    private readonly MainContainer _mainContainer = new MainContainer();

    private void ContainerClicked() {
        Mediator.Send(new LoginState.ShowPassword(Pair));
        _mainContainer.MouseOut();
    }


    private async Task PasswordOkClicked() {
        var authenticationId = await AuthorizationService.Authenticate(Name, _inputPassword.Value);
        if (authenticationId == Guid.Empty) {
            await Mediator.Send(new LoginState.NotifyBadLogin(Pair));
        }
        else {
            await Mediator.Send(new LoginState.Connected(Pair));
        }
    }

    private void PasswordCancelClicked() {
        Mediator.Send(new LoginState.HidePassword(Pair));
    }

    private class MainContainer {
        private const string Over = "border-light shadow";
        private const string Out = "border-light shadow-sm";

        public string CssClass { get; set; }

        public void MouseOver() => CssClass = Over;
        public void MouseOut() => CssClass = Out;
    }

}

<style>

    input[type="password"] {
        text-align: center;
    }

        input[type="password"]::placeholder {
            text-align: center;
        }
</style>