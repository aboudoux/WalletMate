@inject IJSRuntime JsRuntime
<div @ref="divElementReference" class="@CssClass">
    @ChildContent
</div>

@code {

    ElementReference divElementReference;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            JsRuntime.InvokeVoidAsync("AnimatedComponent.animationend",divElementReference, dotNetReference);
        }
    }

    public enum AnimationType
    {
        none,
        bounce,
        shake,
        zoomIn,
        bounceIn
    }

    private string CssClass => Type != AnimationType.none
        ? $"animated {Type.ToString()} faster"
        : string.Empty;
    
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public AnimationType Type { get; set; }

    [JSInvokable("OnAnimationEnd")]
    public void AnimationEnd()
    {
        _animationEnd?.Invoke();
    }

    private Action _animationEnd;

    [CascadingParameter(Name = "OnAnimationEnd")]
    public Action CascadingOnAnimationEnd
    {
        set => _animationEnd = value;
    }

    [Parameter]
    public Action OnAnimationEnd {
        set => _animationEnd = value;
    }
}
