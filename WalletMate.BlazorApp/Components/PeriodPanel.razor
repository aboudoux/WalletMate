@using WalletMate.Application.Periods.Queries
@using WalletMate.BlazorApp.Store.Spreadsheet
<div class="card" @onclick="Clicked">
    <div class="card-header">
        <div class="row">
            <div class="col-md-10 offset-md-0" style="padding-top: 5;">
                <h5 class="text-left mb-0" style="margin: 0;margin-top: 0;">@PeriodName</h5>
            </div>
            <div class="col text-right"><i class="@Icon"></i></div>
        </div>
    </div>
    @if (Expanded == PeriodState.ExpandState.Expanded)
    {
        <div class="card-body">
            @foreach (var op in Operations) {
                <p>@op.Label</p>
            }

            <div class="row">
                <button class="btn btn-warning" type="button" @onclick="ClickAddSpending">Dépense</button>
                <button class="btn btn-warning" type="button" @onclick="ClickAddRecipe">Recette</button>
            </div>
        </div>
    }
    
    // ajouter ActionPanel    
</div>

@code {

    [Parameter]
    public string PeriodName { get; set; }

    [Parameter]
    public EventCallback Clicked { get; set; }

    [Parameter]
    public EventCallback ClickAddSpending { get; set; }

    [Parameter]
    public EventCallback ClickAddRecipe { get; set; }


    [Parameter]
    public PeriodState.ExpandState Expanded { get; set; }

    [Parameter]
    public IReadOnlyList<IPeriodOperation> Operations { get; set; } = new List<IPeriodOperation>();

    string Icon
    {
        get
        {
            switch (Expanded)
            {
                case PeriodState.ExpandState.Collapsed:
                    return "fa fa-chevron-right";
                case PeriodState.ExpandState.Expanding:
                    return "";
                case PeriodState.ExpandState.Expanded:
                    return "fa fa-chevron-down";
                
            }
            return string.Empty;
        }
    }
}
