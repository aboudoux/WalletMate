// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WalletMate.Domain.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calcul de balance pour une période")]
    public partial class CalculDeBalancePourUnePeriodeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PeriodBalance.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Calcul de balance pour une période", "En tant qu\'utilisateur\r\n  Je veux que la période me calcul la balance en fonction" +
                    " de mes opérations\r\n  Afin de connaitre quelle somme est due et par qui lors d\'u" +
                    "ne période", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calcul de la somme due en fonction des dépenses")]
        public virtual void CalculDeLaSommeDueEnFonctionDesDepenses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcul de la somme due en fonction des dépenses", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("Une période est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table1.AddRow(new string[] {
                        "100",
                        "Courses",
                        "Aurelien",
                        "Commun"});
            table1.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Avance"});
            table1.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Avance"});
            table1.AddRow(new string[] {
                        "300",
                        "Leclerc",
                        "Marie",
                        "Commun"});
            table1.AddRow(new string[] {
                        "700",
                        "Nounou",
                        "Marie",
                        "Commun"});
#line 8
 testRunner.When("J\'ajoute à la période les dépenses suivantes", ((string)(null)), table1, "When ");
#line 15
 testRunner.Then("le binome Aurelien doit la somme de 300 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calcul de la somme due en fonction des recettes")]
        public virtual void CalculDeLaSommeDueEnFonctionDesRecettes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcul de la somme due en fonction des recettes", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("Une période est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table2.AddRow(new string[] {
                        "100",
                        "Courses",
                        "Aurelien",
                        "Commune"});
            table2.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Individuelle"});
            table2.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Individuelle"});
            table2.AddRow(new string[] {
                        "300",
                        "Leclerc",
                        "Marie",
                        "Commune"});
            table2.AddRow(new string[] {
                        "700",
                        "Nounou",
                        "Marie",
                        "Commune"});
#line 19
 testRunner.When("J\'ajoute à la période les recettes suivantes", ((string)(null)), table2, "When ");
#line 26
 testRunner.Then("le binome Marie doit la somme de 300 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calcul de la somme due en fonction des dépenses et recettes")]
        public virtual void CalculDeLaSommeDueEnFonctionDesDepensesEtRecettes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcul de la somme due en fonction des dépenses et recettes", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("Une période est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table3.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Avance"});
            table3.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Avance"});
            table3.AddRow(new string[] {
                        "300",
                        "Leclerc",
                        "Marie",
                        "Commun"});
#line 30
 testRunner.When("J\'ajoute à la période les dépenses suivantes", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table4.AddRow(new string[] {
                        "100",
                        "Courses",
                        "Aurelien",
                        "Commune"});
            table4.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Individuelle"});
            table4.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Individuelle"});
#line 35
 testRunner.And("J\'ajoute à la période les recettes suivantes", ((string)(null)), table4, "And ");
#line 40
 testRunner.Then("le binome Aurelien doit la somme de 200 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Somme due à 0")]
        public virtual void SommeDueA0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Somme due à 0", ((string[])(null)));
#line 42
 this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("Une période est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table5.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Avance"});
            table5.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Avance"});
            table5.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Aurelien",
                        "Avance"});
            table5.AddRow(new string[] {
                        "300",
                        "Leclerc",
                        "Marie",
                        "Commun"});
            table5.AddRow(new string[] {
                        "100",
                        "Leclerc",
                        "Aurelien",
                        "Avance"});
            table5.AddRow(new string[] {
                        "100",
                        "Leclerc",
                        "Aurelien",
                        "Commun"});
#line 44
 testRunner.When("J\'ajoute à la période les dépenses suivantes", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table6.AddRow(new string[] {
                        "100",
                        "Courses",
                        "Aurelien",
                        "Commune"});
            table6.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Individuelle"});
            table6.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Individuelle"});
#line 52
 testRunner.And("J\'ajoute à la période les recettes suivantes", ((string)(null)), table6, "And ");
#line 57
 testRunner.Then("le binome Marie doit la somme de 0 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Arrondir la somme due à deux chiffres après la virgule.")]
        public virtual void ArrondirLaSommeDueADeuxChiffresApresLaVirgule_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Arrondir la somme due à deux chiffres après la virgule.", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("Une période est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table7.AddRow(new string[] {
                        "239.45",
                        "Pret",
                        "Aurelien",
                        "Avance"});
            table7.AddRow(new string[] {
                        "70",
                        "taxe",
                        "Aurelien",
                        "Commun"});
            table7.AddRow(new string[] {
                        "12.35",
                        "courses",
                        "Aurelien",
                        "Commun"});
            table7.AddRow(new string[] {
                        "7.82",
                        "courses",
                        "Aurelien",
                        "Commun"});
#line 61
 testRunner.When("J\'ajoute à la période les dépenses suivantes", ((string)(null)), table7, "When ");
#line 67
 testRunner.Then("le binome Marie doit la somme de 284.54 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recalcul de la somme due lors d\'une modification de montant")]
        public virtual void RecalculDeLaSommeDueLorsDUneModificationDeMontant()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recalcul de la somme due lors d\'une modification de montant", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("Une période est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table8.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Avance"});
            table8.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Avance"});
            table8.AddRow(new string[] {
                        "300",
                        "Leclerc",
                        "Marie",
                        "Commun"});
#line 71
 testRunner.And("j\'y ai ajouté les dépenses suivantes", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table9.AddRow(new string[] {
                        "100",
                        "Courses",
                        "Aurelien",
                        "Commune"});
            table9.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Individuelle"});
            table9.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Individuelle"});
#line 76
 testRunner.And("j\'y ai ajouté les recettes suivantes", ((string)(null)), table9, "And ");
#line 81
 testRunner.When("je modifie le montant de l\'operation 1 en 100 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then("le binome Aurelien doit la somme de 300 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recalcul de la somme due lors d\'une modification de binome")]
        public virtual void RecalculDeLaSommeDueLorsDUneModificationDeBinome()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recalcul de la somme due lors d\'une modification de binome", ((string[])(null)));
#line 84
this.ScenarioSetup(scenarioInfo);
#line 85
 testRunner.Given("Une période est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table10.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Avance"});
            table10.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Avance"});
            table10.AddRow(new string[] {
                        "300",
                        "Leclerc",
                        "Marie",
                        "Commun"});
#line 86
 testRunner.And("j\'y ai ajouté les dépenses suivantes", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table11.AddRow(new string[] {
                        "100",
                        "Courses",
                        "Aurelien",
                        "Commune"});
            table11.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Individuelle"});
            table11.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Individuelle"});
#line 91
 testRunner.And("j\'y ai ajouté les recettes suivantes", ((string)(null)), table11, "And ");
#line 96
 testRunner.When("je modifie le binome de l\'operation 1 en Marie", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("le binome Aurelien doit la somme de 600 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recalcul de la somme due lors d\'une modification de type")]
        public virtual void RecalculDeLaSommeDueLorsDUneModificationDeType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recalcul de la somme due lors d\'une modification de type", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.Given("Une période est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table12.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Avance"});
            table12.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Avance"});
            table12.AddRow(new string[] {
                        "300",
                        "Leclerc",
                        "Marie",
                        "Commun"});
#line 101
 testRunner.And("j\'y ai ajouté les dépenses suivantes", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table13.AddRow(new string[] {
                        "100",
                        "Courses",
                        "Aurelien",
                        "Commune"});
            table13.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Individuelle"});
            table13.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Individuelle"});
#line 106
 testRunner.And("j\'y ai ajouté les recettes suivantes", ((string)(null)), table13, "And ");
#line 111
 testRunner.When("je modifie le type de l\'operation 1 en Commun", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
 testRunner.Then("le binome Aurelien doit la somme de 300 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recalcul de la somme due lors de la suppression d\'une dépense")]
        public virtual void RecalculDeLaSommeDueLorsDeLaSuppressionDUneDepense()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recalcul de la somme due lors de la suppression d\'une dépense", ((string[])(null)));
#line 114
this.ScenarioSetup(scenarioInfo);
#line 115
 testRunner.Given("Une période est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table14.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Avance"});
            table14.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Avance"});
            table14.AddRow(new string[] {
                        "300",
                        "Leclerc",
                        "Marie",
                        "Commun"});
#line 116
 testRunner.And("j\'y ai ajouté les dépenses suivantes", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table15.AddRow(new string[] {
                        "100",
                        "Courses",
                        "Aurelien",
                        "Commune"});
            table15.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Individuelle"});
            table15.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Individuelle"});
#line 121
 testRunner.And("j\'y ai ajouté les recettes suivantes", ((string)(null)), table15, "And ");
#line 126
 testRunner.When("je supprime l\'opération 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then("le binome Aurelien doit la somme de 150 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recalcul de la somme due lors de la suppression d\'une recette")]
        public virtual void RecalculDeLaSommeDueLorsDeLaSuppressionDUneRecette()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recalcul de la somme due lors de la suppression d\'une recette", ((string[])(null)));
#line 129
this.ScenarioSetup(scenarioInfo);
#line 130
testRunner.Given("Une période est créée", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table16.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Avance"});
            table16.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Avance"});
            table16.AddRow(new string[] {
                        "300",
                        "Leclerc",
                        "Marie",
                        "Commun"});
#line 131
 testRunner.And("j\'y ai ajouté les dépenses suivantes", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table17.AddRow(new string[] {
                        "100",
                        "Courses",
                        "Aurelien",
                        "Commune"});
            table17.AddRow(new string[] {
                        "200",
                        "Pret",
                        "Aurelien",
                        "Individuelle"});
            table17.AddRow(new string[] {
                        "50",
                        "Cadeaux",
                        "Marie",
                        "Individuelle"});
#line 136
 testRunner.And("j\'y ai ajouté les recettes suivantes", ((string)(null)), table17, "And ");
#line 141
 testRunner.When("je supprime l\'opération 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
 testRunner.Then("le binome Aurelien doit la somme de 150 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

