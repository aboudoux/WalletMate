// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CoupleExpenses.Infrastructure.Tests.Scenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PeriodFeature : Xunit.IClassFixture<PeriodFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Period.feature"
#line hidden
        
        public PeriodFeature(PeriodFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Period", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("Je suis connecté à l\'application avec l\'utilisateur aurelien et le mot de passe 0" +
                    "f46f2fb6f5a91c79e86acc5da7df95176b4e4c7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Création d\'une nouvelle période")]
        [Xunit.TraitAttribute("FeatureTitle", "Period")]
        [Xunit.TraitAttribute("Description", "Création d\'une nouvelle période")]
        public virtual void CreationDuneNouvellePeriode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Création d\'une nouvelle période", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 10
 testRunner.When("Je demande la création d\'une période pour le mois 1 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("La liste des périodes contient \"Janvier 2001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Intérdire la création de deux mêmes périodes")]
        [Xunit.TraitAttribute("FeatureTitle", "Period")]
        [Xunit.TraitAttribute("Description", "Intérdire la création de deux mêmes périodes")]
        public virtual void InterdireLaCreationDeDeuxMemesPeriodes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Intérdire la création de deux mêmes périodes", null, ((string[])(null)));
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 14
 testRunner.And("J\'ai demandé la création d\'une période pour le mois 1 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("Je demande la création d\'une période pour le mois 1 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("Le serveur me retourne une erreur 400 avec le message \"La période Janvier 2001 ex" +
                    "iste déjà.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Ajouter une dépense à une période")]
        [Xunit.TraitAttribute("FeatureTitle", "Period")]
        [Xunit.TraitAttribute("Description", "Ajouter une dépense à une période")]
        public virtual void AjouterUneDepenseAUnePeriode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter une dépense à une période", null, ((string[])(null)));
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 19
 testRunner.And("J\'ai demandé la création d\'une période pour le mois 1 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table1.AddRow(new string[] {
                        "2001-01",
                        "100",
                        "Test",
                        "Aurélien",
                        "Commun"});
#line 20
 testRunner.When("J\'ajoute des dépenses dans l\'application", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "operationId",
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table2.AddRow(new string[] {
                        "Dépense",
                        "1",
                        "2001-01",
                        "100",
                        "Test",
                        "Aurélien",
                        "Commun"});
#line 23
 testRunner.Then("La liste des opérations pour la période 2001-01 contient les elements suivants", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Ajouter une recette à une période")]
        [Xunit.TraitAttribute("FeatureTitle", "Period")]
        [Xunit.TraitAttribute("Description", "Ajouter une recette à une période")]
        public virtual void AjouterUneRecetteAUnePeriode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter une recette à une période", null, ((string[])(null)));
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 28
 testRunner.And("J\'ai demandé la création d\'une période pour le mois 1 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table3.AddRow(new string[] {
                        "2001-01",
                        "200",
                        "Test de recette",
                        "Marie",
                        "Commun"});
#line 29
 testRunner.When("J\'ajoute des recettes dans l\'application", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "OperationId",
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table4.AddRow(new string[] {
                        "Recette",
                        "1",
                        "2001-01",
                        "200",
                        "Test de recette",
                        "Marie",
                        "Commun"});
#line 32
 testRunner.Then("La liste des opérations pour la période 2001-01 contient les elements suivants", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Supprimer une dépense d\'une période")]
        [Xunit.TraitAttribute("FeatureTitle", "Period")]
        [Xunit.TraitAttribute("Description", "Supprimer une dépense d\'une période")]
        public virtual void SupprimerUneDepenseDunePeriode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Supprimer une dépense d\'une période", null, ((string[])(null)));
#line 36
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 37
testRunner.And("J\'ai demandé la création d\'une période pour le mois 1 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table5.AddRow(new string[] {
                        "2001-01",
                        "100",
                        "Test",
                        "Aurélien",
                        "Commun"});
#line 38
 testRunner.And("J\'ai ajouté des dépenses dans l\'application", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "OperationId",
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table6.AddRow(new string[] {
                        "Dépense",
                        "1",
                        "2001-01",
                        "100",
                        "Test",
                        "Aurélien",
                        "Commun"});
#line 41
 testRunner.And("La liste des opérations pour la période 2001-01 contient les elements suivants", ((string)(null)), table6, "And ");
#line 44
 testRunner.When("Je demande à supprimer l\'opération 1 de la période 2001-01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("La liste des opérations pour la période 2001-01 est vide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Supprimer une recette d\'une période")]
        [Xunit.TraitAttribute("FeatureTitle", "Period")]
        [Xunit.TraitAttribute("Description", "Supprimer une recette d\'une période")]
        public virtual void SupprimerUneRecetteDunePeriode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Supprimer une recette d\'une période", null, ((string[])(null)));
#line 47
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 48
testRunner.And("J\'ai demandé la création d\'une période pour le mois 1 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table7.AddRow(new string[] {
                        "2001-01",
                        "100",
                        "Test",
                        "Aurélien",
                        "Commun"});
#line 49
 testRunner.And("J\'ai ajouté des recettes dans l\'application", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "OperationId",
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table8.AddRow(new string[] {
                        "Recette",
                        "1",
                        "2001-01",
                        "100",
                        "Test",
                        "Aurélien",
                        "Commun"});
#line 52
 testRunner.And("La liste des opérations pour la période 2001-01 contient les elements suivants", ((string)(null)), table8, "And ");
#line 55
 testRunner.When("Je demande à supprimer l\'opération 1 de la période 2001-01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.Then("La liste des opérations pour la période 2001-01 est vide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Modifier le montant d\'une opération de recette")]
        [Xunit.TraitAttribute("FeatureTitle", "Period")]
        [Xunit.TraitAttribute("Description", "Modifier le montant d\'une opération de recette")]
        public virtual void ModifierLeMontantDuneOperationDeRecette()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Modifier le montant d\'une opération de recette", null, ((string[])(null)));
#line 58
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 59
testRunner.And("J\'ai demandé la création d\'une période pour le mois 1 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table9.AddRow(new string[] {
                        "2001-01",
                        "100",
                        "Test",
                        "Aurélien",
                        "Commun"});
#line 60
 testRunner.And("J\'ai ajouté des recettes dans l\'application", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "OperationId",
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table10.AddRow(new string[] {
                        "Recette",
                        "1",
                        "2001-01",
                        "100",
                        "Test",
                        "Aurélien",
                        "Commun"});
#line 63
 testRunner.And("La liste des opérations pour la période 2001-01 contient les elements suivants", ((string)(null)), table10, "And ");
#line 66
 testRunner.When("je demande à modifier le montant de la recette numéro 1 en 200 euros pour la péri" +
                    "ode 2001-01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.Then("L\'opération 1 de la période 2001-01 à un montant de 200 euros", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Obtenir le solde d\'une période après de multiples opérations")]
        [Xunit.TraitAttribute("FeatureTitle", "Period")]
        [Xunit.TraitAttribute("Description", "Obtenir le solde d\'une période après de multiples opérations")]
        public virtual void ObtenirLeSoldeDunePeriodeApresDeMultiplesOperations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Obtenir le solde d\'une période après de multiples opérations", null, ((string[])(null)));
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 71
 testRunner.And("J\'ai demandé la création d\'une période pour le mois 1 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table11.AddRow(new string[] {
                        "2001-01",
                        "150",
                        "leclerc",
                        "Marie",
                        "Commun"});
            table11.AddRow(new string[] {
                        "2001-01",
                        "200",
                        "cadeau",
                        "Aurelien",
                        "Commun"});
            table11.AddRow(new string[] {
                        "2001-01",
                        "55",
                        "edf",
                        "Aurelien",
                        "Commun"});
            table11.AddRow(new string[] {
                        "2001-01",
                        "30",
                        "docteur",
                        "Marie",
                        "Avance"});
#line 72
 testRunner.When("J\'ajoute des dépenses dans l\'application", ((string)(null)), table11, "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "TypeOperation"});
            table12.AddRow(new string[] {
                        "2001-01",
                        "200",
                        "CAF",
                        "Marie",
                        "Commun"});
#line 78
 testRunner.And("J\'ajoute des recettes dans l\'application", ((string)(null)), table12, "And ");
#line 81
 testRunner.Then("Marie doit la somme de 122.5 euros pour la période 2001-01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PeriodFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PeriodFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
