// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WalletMate.Infrastructure.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Rechercher une opération")]
    public partial class RechercherUneOperationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SearchOperation.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Rechercher une opération", "\tEn tant qu\'utilisateur\r\n\tJe veux pouvoir rechercher un opération dans l\'applicat" +
                    "ion\r\n\tPour savoir si celle-ci a déjà été enregistrée dans l\'application", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("Je suis connecté à l\'application avec l\'utilisateur Aurélien et le mot de passe 1" +
                    "234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("J\'ai demandé la création d\'une période pour le mois 1 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And("J\'ai demandé la création d\'une période pour le mois 3 et l\'année 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table27.AddRow(new string[] {
                        "2001-01",
                        "100",
                        "Leclerc",
                        "Marie",
                        "Commun"});
            table27.AddRow(new string[] {
                        "2001-01",
                        "18",
                        "leroy merlin",
                        "Aurélien",
                        "Commun"});
            table27.AddRow(new string[] {
                        "2001-01",
                        "25",
                        "restaurant",
                        "Aurélien",
                        "Commun"});
            table27.AddRow(new string[] {
                        "2001-01",
                        "50",
                        "spectacle",
                        "Marie",
                        "Commun"});
            table27.AddRow(new string[] {
                        "2001-01",
                        "100",
                        "liquide",
                        "Aurélien",
                        "Avance"});
            table27.AddRow(new string[] {
                        "2001-03",
                        "30",
                        "cadeaux",
                        "Aurélien",
                        "Commun"});
            table27.AddRow(new string[] {
                        "2001-01",
                        "1234.56",
                        "bricolage",
                        "Marie",
                        "Commun"});
#line 10
 testRunner.And("J\'ai ajouté des dépenses dans l\'application", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Periode",
                        "Montant",
                        "Libelle",
                        "Binome",
                        "Categorie"});
            table28.AddRow(new string[] {
                        "2001-01",
                        "10",
                        "CAF",
                        "Marie",
                        "Commun"});
            table28.AddRow(new string[] {
                        "2001-01",
                        "10",
                        "Cadeau",
                        "Aurélien",
                        "Commun"});
            table28.AddRow(new string[] {
                        "2001-01",
                        "20",
                        "Noel",
                        "Marie",
                        "Commun"});
#line 19
 testRunner.And("J\'ai ajouté des recettes dans l\'application", ((string)(null)), table28, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recherche par la période")]
        public virtual void RechercheParLaPeriode()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recherche par la période", null, ((string[])(null)));
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 26
 testRunner.When("Je lance une recherche d\'opérations avec le filtre \"mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table29.AddRow(new string[] {
                            "Dépense",
                            "1",
                            "2001-03",
                            "30",
                            "cadeaux",
                            "Aurélien",
                            "Commun"});
#line 27
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table29, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recherche par le montant")]
        public virtual void RechercheParLeMontant()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recherche par le montant", null, ((string[])(null)));
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 32
 testRunner.When("Je lance une recherche d\'opérations avec le filtre \"100\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table30.AddRow(new string[] {
                            "Dépense",
                            "1",
                            "2001-01",
                            "100",
                            "Leclerc",
                            "Marie",
                            "Commun"});
                table30.AddRow(new string[] {
                            "Dépense",
                            "5",
                            "2001-01",
                            "100",
                            "liquide",
                            "Aurélien",
                            "Avance"});
#line 33
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table30, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recherche par une parite du montant")]
        [NUnit.Framework.TestCaseAttribute("12", null)]
        [NUnit.Framework.TestCaseAttribute("123", null)]
        [NUnit.Framework.TestCaseAttribute("1234", null)]
        [NUnit.Framework.TestCaseAttribute("1234,5", null)]
        [NUnit.Framework.TestCaseAttribute("1234,56", null)]
        public virtual void RechercheParUnePariteDuMontant(string filtre, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recherche par une parite du montant", null, exampleTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 39
 testRunner.When(string.Format("Je lance une recherche d\'opérations avec le filtre \"{0}\"", filtre), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table31.AddRow(new string[] {
                            "Dépense",
                            "6",
                            "2001-01",
                            "1234.56",
                            "bricolage",
                            "Marie",
                            "Commun"});
#line 40
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table31, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recherche par le label")]
        public virtual void RechercheParLeLabel()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recherche par le label", null, ((string[])(null)));
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 52
 testRunner.When("Je lance une recherche d\'opérations avec le filtre \"leclerc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table32.AddRow(new string[] {
                            "Dépense",
                            "1",
                            "2001-01",
                            "100",
                            "Leclerc",
                            "Marie",
                            "Commun"});
#line 53
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table32, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recherche par le binôme")]
        public virtual void RechercheParLeBinome()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recherche par le binôme", null, ((string[])(null)));
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 59
 testRunner.When("Je lance une recherche d\'opérations avec le filtre \"marie\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table33.AddRow(new string[] {
                            "Dépense",
                            "1",
                            "2001-01",
                            "100",
                            "Leclerc",
                            "Marie",
                            "Commun"});
                table33.AddRow(new string[] {
                            "Dépense",
                            "4",
                            "2001-01",
                            "50",
                            "spectacle",
                            "Marie",
                            "Commun"});
                table33.AddRow(new string[] {
                            "Dépense",
                            "6",
                            "2001-01",
                            "1234.56",
                            "bricolage",
                            "Marie",
                            "Commun"});
                table33.AddRow(new string[] {
                            "Recette",
                            "7",
                            "2001-01",
                            "10",
                            "CAF",
                            "Marie",
                            "Commun"});
                table33.AddRow(new string[] {
                            "Recette",
                            "9",
                            "2001-01",
                            "20",
                            "Noel",
                            "Marie",
                            "Commun"});
#line 60
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table33, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recherche par la catégorie")]
        public virtual void RechercheParLaCategorie()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recherche par la catégorie", null, ((string[])(null)));
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 69
 testRunner.When("Je lance une recherche d\'opérations avec le filtre \"Avance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table34.AddRow(new string[] {
                            "Dépense",
                            "5",
                            "2001-01",
                            "100",
                            "liquide",
                            "Aurélien",
                            "Avance"});
#line 70
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table34, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recherche par le type")]
        public virtual void RechercheParLeType()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recherche par le type", null, ((string[])(null)));
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 75
 testRunner.When("Je lance une recherche d\'opérations avec le filtre \"recette\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table35.AddRow(new string[] {
                            "Recette",
                            "7",
                            "2001-01",
                            "10",
                            "CAF",
                            "Marie",
                            "Commun"});
                table35.AddRow(new string[] {
                            "Recette",
                            "8",
                            "2001-01",
                            "10",
                            "Cadeau",
                            "Aurélien",
                            "Commun"});
                table35.AddRow(new string[] {
                            "Recette",
                            "9",
                            "2001-01",
                            "20",
                            "Noel",
                            "Marie",
                            "Commun"});
#line 76
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table35, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recherche combinée par type et montant")]
        public virtual void RechercheCombineeParTypeEtMontant()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recherche combinée par type et montant", null, ((string[])(null)));
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 83
 testRunner.When("Je lance une recherche d\'opérations avec le filtre \"dépense 25\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table36.AddRow(new string[] {
                            "Dépense",
                            "3",
                            "2001-01",
                            "25",
                            "restaurant",
                            "Aurélien",
                            "Commun"});
#line 84
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table36, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recherche combinée par période et libellé")]
        public virtual void RechercheCombineeParPeriodeEtLibelle()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recherche combinée par période et libellé", null, ((string[])(null)));
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 89
testRunner.When("Je lance une recherche d\'opérations avec le filtre \"mars cadeaux\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table37.AddRow(new string[] {
                            "Dépense",
                            "1",
                            "2001-03",
                            "30",
                            "cadeaux",
                            "Aurélien",
                            "Commun"});
#line 90
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table37, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Recherche combinée avec tous les critères")]
        public virtual void RechercheCombineeAvecTousLesCriteres()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Recherche combinée avec tous les critères", null, ((string[])(null)));
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 95
testRunner.When("Je lance une recherche d\'opérations avec le filtre \"100 Marie leclerc commun janv" +
                        "ier\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table38.AddRow(new string[] {
                            "Dépense",
                            "1",
                            "2001-01",
                            "100",
                            "Leclerc",
                            "Marie",
                            "Commun"});
#line 96
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table38, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("La recherche ne tiens pas compte de l\'année de la période")]
        public virtual void LaRechercheNeTiensPasCompteDeLanneeDeLaPeriode()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("La recherche ne tiens pas compte de l\'année de la période", null, ((string[])(null)));
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 101
 testRunner.When("Je lance une recherche d\'opérations avec le filtre \"20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "OperationId",
                            "Periode",
                            "Montant",
                            "Libelle",
                            "Binome",
                            "Categorie"});
                table39.AddRow(new string[] {
                            "Recette",
                            "9",
                            "2001-01",
                            "20",
                            "Noel",
                            "Marie",
                            "Commun"});
#line 102
 testRunner.Then("La liste des opérations trouvées est", ((string)(null)), table39, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Une recherche vide ne retourne rien")]
        public virtual void UneRechercheVideNeRetourneRien()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Une recherche vide ne retourne rien", null, ((string[])(null)));
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 107
 testRunner.When("Je lance une recherche d\'opérations avec le filtre \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
 testRunner.Then("La liste des opérations trouvées est vide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
